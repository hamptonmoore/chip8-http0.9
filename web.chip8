$HTTPHEADER
DATA "HTTP/1.1 "

$404NOTFOUND
DATA "404 file not found\r\n\r\n404 file not found"

$200INDEX
DATA "200 Ok\r\nContent-type: text/html\r\n\r\n<head><link rel="stylesheet" href="s"></head><div id=c><header><h1>hammy\'s 8-bit website</h1></header><main><h3>Hello!</h3><p>Welcome to my 8-bit website! This website is hosted on an Virtual Machine (VM) written by ~hammy for the <a href=//u.nu/quq22>chip-8 cpu architecture</a>. Chip-8 VMs only have 4 kilobytes of memory to hold everything, including all of the code and assets used (like the files for this website). The VM for this was written from the ground up in pure NodeJS (A run-time for the Javascript programming language). The VM was then slightly modified from a typical Chip-8 VM by adding in a networking card. This networking card is what allows the VM to host a website like this, since this has never been done before I had to write all the code for the networking card and the hosting of this website all by myself.<br><br>During my first attempt at making the Chip-8 VM run a website I wrote the code purely in Chip-8 bytecode. This was very hard to work with as it is all just hexadecimal (0-9,A-F) opcodes, for instance this code handled writing data from a buffer out to the TCP socket.<pre>A100 6100 6200 F065 400 1400 AF03 F155 7201 A100 F21E 1356</pre>Having made some fundimental design issues in my first round of making a webserver, I needed to recreate it, To overcome the issue of readability and because I was already doing a full re-write I wrote a chip8 assembler from scratch. This assembler meant that I could finally write in a more human readable format, here is similar chunk of code. <code><pre>ADDI 0xb\nLOAD 0x1 0x01\nREAD 0\nSKNE 0x0 0x00\nJUMP $ENDSENDSTRING\nLOADI 0xF03\nSTOR 1</pre></code>By transitioning to a using my own assembler I was able to rewrite the webserver in much less time and fix many bugs in the process. For that reason this website is now fully self-contained with the stylesheet hosted on the VM as-well. In addition to that a proper HTTP 404 error is returned for any pages that one attempts to load, but do not exist. <p>Created with <span style=color:red>&lt;3</span> by <a href=//hamptonmoore.com/ target=_blank>~hammy</a></main></div>"

$200STYLES
DATA "200 Ok\r\n\r\nbody{background-color:#EBEDF4;font-family:monospace}#c{background-color:#fafafa;margin:auto;max-width:600px;box-shadow:16px 16px #202949}header{background-color:#405392;padding:16px;color:#fafafa}main{padding:16px;background-color:#fafafa}pre{background-color:#202949;color:#fafafa;padding:1px}"

$DETECTREQ
// Setup
LOAD 1 0x01
LOADI 0xF01
// Detect G
STOR 1
READ 0
SKE 0 "G"
LOAD 0xc 0x00
SKE 0 "G"
RTS
// Detect E
STOR 1
READ 0
SKE 0 "E"
LOAD 0xc 0x00
SKE 0 "E"
RTS
// Detect T
STOR 1
READ 0
SKE 0 "T"
LOAD 0xc 0x00
SKE 0 "T"
RTS
// Detect Space
STOR 1
READ 0
SKE 0 " "
LOAD 0xc 0x00
SKE 0 " "
RTS
// Detect Slash
STOR 1
READ 0
SKE 0 "/"
LOAD 0xc 0x00
SKE 0 "/"
RTS
// Detect Space
STOR 1
READ 0
SKNE 0 "s"
LOAD 0xc 0x02
SKNE 0 "s"
RTS
SKE 0 " "
LOAD 0xc 0x00
SKE 0 " "
RTS
LOAD 0xc 0x01
RTS

$ENDSENDSTRING
LOAD 0xa 0x01
RTS

$LOAD9SUB
ADDI 0x0
ADD 0x1 0x01
RTS

$LOAD9
SKRE 0x9 0x1
CALL $LOAD9SUB
SKRE 0x9 0x1
JUMP $LOAD9
RTS

$SENDSTRING
LOAD 0x1 0x00
LOAD 0 0x00
LOAD 0 0xff
CALL $LOAD9
LOAD 0 0x00
ADDI 0xb
LOAD 0x1 0x01
READ 0
SKNE 0x0 0x00
JUMP $ENDSENDSTRING
LOADI 0xF03
STOR 1
SKNE 0xb 0xff
ADD 0x9 0x01
SKNE 0xb 0xff
ADD 0xb 0x01
ADD 0xb 0x01
RTS

$SENDHTTPHEADER
LOADI $HTTPHEADER
CALL $SENDSTRING
SKE 0xa 0x01
JUMP $SENDHTTPHEADER
RTS

$SEND200INDEX
LOADI $200INDEX
CALL $SENDSTRING
SKE 0xa 0x01
JUMP $SEND200INDEX
RTS

$SEND200STYLES
LOADI $200STYLES
CALL $SENDSTRING
SKE 0xa 0x01
JUMP $SEND200STYLES
RTS

$SEND404NOTFOUND
LOADI $404NOTFOUND
CALL $SENDSTRING
SKE 0xa 0x01
JUMP $SEND404NOTFOUND
RTS

$WAITFOREND
// Setup
LOAD 1 0x01
LOADI 0xF01
// Detect G
STOR 1
READ 0
SKE 0 0x0D
JUMP $WAITFOREND
// Detect E
STOR 1
READ 0
SKE 0 0x0A
JUMP $WAITFOREND
RTS

// Okay now lets make sure it is a GET request
// VC
$PROCESSREQUEST
LOAD 0xc 0x00
CALL $DETECTREQ
CALL $WAITFOREND
LOAD 0xb 0x00
LOAD 0x9 0x00
LOAD 0xa 0x00
CALL $SENDHTTPHEADER
LOAD 0xb 0x00
LOAD 0xa 0x00
LOAD 0x9 0x00
SKNE 0xc 0x01
CALL $SEND200INDEX
SKNE 0xc 0x02
CALL $SEND200STYLES
SKNE 0xc 0x00
CALL $SEND404NOTFOUND
LOADI 0xF06
STOR 0
RTS

// Listen for the socket to open
$WAITFORCONNECTION
READ 0
SKE 0 0x01
JUMP $WAITFORCONNECTION
JUMP $PROCESSREQUEST
EXIT

$START
LOADI 0xF06
CALL $WAITFORCONNECTION
JUMP $START
EXIT


